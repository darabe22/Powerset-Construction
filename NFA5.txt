Enter the expression to be parsed: 
(b.b*.a|a|d.(b|d)*.a).(d.b*.d)*
bb*.a.a|dbd|*.a.|db*.d.*.

Printing nfa

Printing Graph
Starting state is:  
   10
There are 20 state(s) in the graph:  
State 10
   has path(s) to
   1)d--->11
   2)a--->9
   3)b--->1
State 11
   has path(s) to
   1)--->15
   2)--->13
State 17
   has path(s) to
   1)a--->19
State 14
   has path(s) to
   1)d--->15
   2)b--->13
State 15
   has path(s) to
   1)--->14
   2)--->17
State 13
   has path(s) to
   1)--->14
   2)--->17
State 19
   has path(s) to
   1)--->27
State 9
   has path(s) to
   1)--->27
State 1
   has path(s) to
   1)--->3
State 5
   has path(s) to
   1)a--->7
State 2
   has path(s) to
   1)b--->3
State 3
   has path(s) to
   1)--->2
   2)--->5
State 7
   has path(s) to
   1)--->27
State 29
   has no neighbors :( 
State 20
   has path(s) to
   1)d--->21
State 21
   has path(s) to
   1)--->23
State 25
   has path(s) to
   1)d--->27
State 22
   has path(s) to
   1)b--->23
State 23
   has path(s) to
   1)--->22
   2)--->25
State 27
   has path(s) to
   1)--->20
   2)--->29
There is 1 Final state:  
   29  

Printing dfa

Printing Graph
Starting state is:  
   30
There are 12 state(s) in the graph:  
State 30
   has path(s) to
   1)b--->31
   2)a--->32
   3)d--->33
State 31
   has path(s) to
   1)b--->34
   2)a--->35
State 32
   has path(s) to
   1)d--->36
State 33
   has path(s) to
   1)b--->37
   2)a--->38
   3)d--->39
State 34
   has path(s) to
   1)b--->34
   2)a--->35
State 35
   has path(s) to
   1)d--->36
State 36
   has path(s) to
   1)b--->43
   2)d--->44
State 37
   has path(s) to
   1)b--->37
   2)a--->38
   3)d--->39
State 38
   has path(s) to
   1)d--->36
State 39
   has path(s) to
   1)b--->37
   2)a--->38
   3)d--->39
State 43
   has path(s) to
   1)b--->43
   2)d--->44
State 44
   has path(s) to
   1)d--->36
There are 4 Final states:  
   32  35  38  44  

Printing minimum dfa

Printing Graph
Starting state is:  
   55
There are 5 state(s) in the graph:  
State 55
   has path(s) to
   1)b--->56
   2)a--->57
   3)d--->58
State 56
   has path(s) to
   1)b--->56
   2)a--->57
State 57
   has path(s) to
   1)d--->59
State 58
   has path(s) to
   1)b|d--->58
   2)a--->57
State 59
   has path(s) to
   1)b--->59
   2)d--->57
There is 1 Final state:  
   57  

Do you want to parse again (Y/N)?
