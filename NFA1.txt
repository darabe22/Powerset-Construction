Enter the expression to be parsed: 
a.a*|a.b.a*.b*
aa*.ab.a*.b*.|

Printing nfa

Printing Graph
Starting state is:  
   6
There are 13 state(s) in the graph:  
State 6
   has path(s) to
   1)a--->7
   2)a--->1
State 7
   has path(s) to
   1)b--->9
State 9
   has path(s) to
   1)--->11
State 13
   has path(s) to
   1)--->15
State 10
   has path(s) to
   1)a--->11
State 11
   has path(s) to
   1)--->10
   2)--->13
State 17
   has no neighbors :( 
State 14
   has path(s) to
   1)b--->15
State 15
   has path(s) to
   1)--->14
   2)--->17
State 1
   has path(s) to
   1)--->3
State 5
   has no neighbors :( 
State 2
   has path(s) to
   1)a--->3
State 3
   has path(s) to
   1)--->2
   2)--->5
There are 2 Final states:  
   17  5  

Printing dfa

Printing Graph
Starting state is:  
   18
There are 6 state(s) in the graph:  
State 18
   has path(s) to
   1)a--->19
State 19
   has path(s) to
   1)a--->20
   2)b--->21
State 20
   has path(s) to
   1)a--->20
State 21
   has path(s) to
   1)a--->23
   2)b--->24
State 23
   has path(s) to
   1)a--->23
   2)b--->24
State 24
   has path(s) to
   1)b--->24
There are 5 Final states:  
   19  20  21  23  24  

Printing minimum dfa

Printing Graph
Starting state is:  
   28
There are 5 state(s) in the graph:  
State 28
   has path(s) to
   1)a--->29
State 29
   has path(s) to
   1)a--->30
   2)b--->31
State 30
   has path(s) to
   1)a--->30
State 31
   has path(s) to
   1)a--->31
   2)b--->32
State 32
   has path(s) to
   1)b--->32
There are 4 Final states:  
   29  30  31  32  

Do you want to parse again (Y/N)?